/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2017 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
/*
	BY EXECUTING, READING, EDITING, COPYING OR KEEPING FILES FROM THIS SOFTWARE SOURCE CODE,
	YOU AGREE TO THE FOLLOWING TERMS IN ADDITION TO EPIC GAMES MARKETPLACE EULA:
	- YOU HAVE READ AND AGREE TO EPIC GAMES TERMS: https://publish.unrealengine.com/faq
	- YOU AGREE DEVELOPER RESERVES ALL RIGHTS TO THE SOFTWARE PROVIDED, GRANTED BY LAW.
	- YOU AGREE YOU'LL NOT CREATE OR PUBLISH DERIVATIVE SOFTWARE TO THE MARKETPLACE.
	- YOU AGREE DEVELOPER WILL NOT PROVIDE SOFTWARE OUTSIDE MARKETPLACE ENVIRONMENT.
	- YOU AGREE DEVELOPER WILL NOT PROVIDE PAID OR EXCLUSIVE SUPPORT SERVICES.
	- YOU AGREE DEVELOPER PROVIDED SUPPORT CHANNELS, ARE UNDER HIS SOLE DISCRETION.
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "GameFramework/ProjectileMovementComponent.h"
#include "PooledProjectile.generated.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class UObjectPool;
class APooledActor;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Pooled Projectile Component

/// {S} Pooled Projectile Template;
/// This Projectile Component works better with bullet Actors that are generated by an Object-Pool Component.
/// This Component will NOT work properly with 'Instantiate on Demand' feature, it is dependent on Engine's default Projectile Component.
UCLASS(ClassGroup = Synaptech, Category = "Movement", meta = (BlueprintSpawnableComponent, DisplayName = "{S} Pool Projectile Movement", ShortTooltip = "{S} Pooled Projectile Component Class."))
class OBJPOOL_API UPooledProjectile : public UActorComponent {
	GENERATED_BODY()
	//
	UPooledProjectile(const FObjectInitializer& OBJ);
	friend class UObjectPool;
	friend class APooledActor;
private:
	UPROPERTY()
	UProjectileMovementComponent* Movement;
protected:
	UPROPERTY()
	APooledActor* Owner;
	//
	UPROPERTY()
	UPrimitiveComponent* Primitive;
public:
	virtual void PostLoad() override;
	//
	//
	/// Manually fire this Projectile, instead of relying on Component Initialization.
	UFUNCTION(Category = "Projectile", BlueprintNativeEvent, meta = (DisplayName = "Shoot", Keywords = "shoot projectile"))
	void Shoot(); virtual void Shoot_Implementation();
	//
	/// Manually stops this Projectile, instead of relying on Component Destruction.
	UFUNCTION(Category = "Projectile", BlueprintNativeEvent, meta = (DisplayName = "Break", Keywords = "break projectile"))
	void Break(); virtual void Break_Implementation();
	//
	/// Returns reference to the Movement Component that is generated at runtime, if there's any.
	UFUNCTION(Category = "Projectile", BlueprintCallable, meta = (DisplayName = "Get Projectile Movement Component", Keywords = "get projectile movement"))
	UProjectileMovementComponent* GetMovementComponent() const;
	//
	//
	/// Projectile Movement Component Interface:
	//
	/// (Velocity) Speed Vector.
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	FVector Direction;
	//
	/// Initial Speed of Projectile.
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	float InitialSpeed;
	//
	/// Limit Speed of Projectile.
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	float MaxSpeed;
	//
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	bool UpdateOnlyIfRendered;
	//
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	uint32 RotationFollowsVelocity:1;
	//
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	uint32 InitialVelocityInLocalSpace:1;
	//
	UPROPERTY(Category = "Projectile", EditAnywhere, BlueprintReadWrite)
	float ProjectileGravityScale;
	//
	UPROPERTY(Category = "Projectile Bounces", EditAnywhere, BlueprintReadWrite)
	uint32 ShouldBounce:1;
	//
	UPROPERTY(Category = "Projectile Bounces", EditAnywhere, BlueprintReadWrite)
	uint32 BounceAngleAffectsFriction:1;
	//
	UPROPERTY(Category = "Projectile Bounces", EditAnywhere, BlueprintReadWrite, meta = (ClampMin="0", UIMin="0"))
	float Bounciness;
	//
	UPROPERTY(Category = "Projectile Bounces", EditAnywhere, BlueprintReadWrite, meta = (ClampMin="0", UIMin="0"))
	float Friction;
	//
	UPROPERTY(Category = "Projectile Bounces", EditAnywhere, BlueprintReadWrite)
	float BounceVelocityStopSimulatingThreshold;
	//
	UPROPERTY(Category = "Projectile Simulation", EditAnywhere, BlueprintReadWrite)
	uint32 ForceSubStepping:1;
	//
	UPROPERTY(Category = "Projectile Simulation", EditAnywhere, BlueprintReadWrite, meta = (ClampMin="1", ClampMax="25", UIMin="1", UIMax="25"))
	int32 MaxSimulationIterations;
	//
	UPROPERTY(Category = "Projectile Simulation", EditAnywhere, BlueprintReadWrite, meta = (ClampMin="0.0166", ClampMax="0.50", UIMin="0.0166", UIMax="0.50"))
	float MaxSimulationTimeStep;
	//
	UPROPERTY(Category = "Homing", EditAnywhere, BlueprintReadWrite)
	uint32 bIsHomingProjectile:1;
	//
	UPROPERTY(Category = "Homing", EditAnywhere, BlueprintReadWrite)
	float HomingAccelerationMagnitude;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////